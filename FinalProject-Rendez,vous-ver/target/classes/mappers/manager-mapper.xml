<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="managerMapper">



<!-- 회원 resultMap  -->
	 <resultMap id="AdminMemberResultSet" type="AdminMember">
		<id property="uNo" column="USER_NO" />
		<result property="uId" column="USER_ID" />
		<result property="uPwd" column="USER_PWD" />
		<result property="uName" column="USER_NAME" />
		<result property="phone" column="PHONE" />
		<result property="uGender" column="GENDER" />
		<result property="uAge" column="AGE" />
		<result property="addr" column="ADDRESS" />
		<result property="uType" column="USER_TYPE" />
		<result property="uStatus" column="U_STATUS" />
		<result property="enrollDate" column="ENROLL_DATE" />
		<result property="updateDate" column="UPDATE_DATE" />
		
	</resultMap>
	
<!--  -->
	 <resultMap id="AdminMemJoinPayResultSet" type="AdminMemJoinPay">
		<id property="uNo" column="USER_NO" />
		<result property="uId" column="USER_ID" />
		<result property="uName" column="USER_NAME" />
		<result property="uGender" column="GENDER" />
		<result property="total_pay" column="TOTAL_PAY" />
		<result property="enrollDate" column="ENROLL_DATE" />
	</resultMap>
	
<!-- 년도별 개월에 따른 수 조회  -->
	 <resultMap id="AdminMonthsStaticResultSet" type="AdminMonthsStatic">
		<result property="january" column="january" />
		<result property="february" column="february" />
		<result property="march" column="march" />
		<result property="april" column="april" />
		<result property="may" column="may" />
		<result property="june" column="june" />
		<result property="july" column="july" />
		<result property="august" column="august" />
		<result property="september" column="september" />
		<result property="october" column="october" />
		<result property="november" column="november" />
		<result property="decemver" column="decemver" />
	</resultMap>


	

	
	<!-- 쿠폰 조회  -->
	<resultMap id="couponResultSet" type="Coupon">
		<id property="cNo" column="COUPON_NO" />
		<result property="cName" column="COUPON_NAME" />
		<result property="cCode" column="COUPON_CODE" />
		<result property="disRate" column="DISCOUNT_RATE" />
		<result property="startDate" column="DISCOUNT_RATE" />
		<result property="endDate" column="END_DATE" />
		<result property="status" column="STATUS" />
		<result property="uNo" column="USER_NO" />
	</resultMap>
	
		<!-- 멤버와 튜터 조인 ResultSet  -->
	<resultMap id="mAndtuJoinResultSet" type="MemberJoinTutor">
	
		<id property="uNo" column="USER_NO" />
		<result property="uId" column="USER_ID"/>
		<result property="uType" column="USER_TYPE" />
			
		<!-- 튜터 정보 -->
		<result property="tuNick" column="T_NICK" />
		<result property="tuCareer" column="T_CAREER" />
		<result property="tuInfo" column="T_INFO" />
		<result property="tuSocial" column="TSOCIAL" />
		<result property="tuStatus" column="TSTATUS" />
		
		<!-- 튜터 경력인증 -->
		
	
	</resultMap>
	
	<!-- 결제 매핑  -->	
	<resultMap type="AdminPay" id="AdminPayResultSet">
		<id property="pNo" column="PM_NO"/>
		<result property="pStatus" column="PAYMENT_STATUS"/>
		<result property="pDate" column="PAYMENT_DATE"/>
		<result property="pCost" column="PAYMENT_COST"/>
		<result property="pType" column="PAYMENT_TYPE"/>
		<result property="uNo" column="USER_NO"/>
		<result property="lInning" column="L_INNING"/>
		<result property="lNo" column="L_NO"/>

		<result property="sum" column="PSUM"/>
				
	</resultMap>

	
	<resultMap type="AdminLesson" id="AdminLessonResultSet">
		<id property="no" column="NO"/>
		<result property="title" column="TITLE"/>
		<result property="introduction" column="INTRODUCTION"/>
		<result property="target" column="TARGET"/>
		<result property="price" column="PRICE"/>
		<result property="rating" column="RATING"/>
	</resultMap>
	

	<resultMap id="QnaResultSet" type="Qna">
		<id property="qNo" column="Q_NO"/>
		<result property="qTitle" column="Q_TITLE"/>
		<result property="qWriter" column="Q_WRITER"/>
		<result property="qContent" column="Q_CONTENT"/>
		<result property="qDate" column="Q_DATE"/>
		<result property="aStatus" column="A_STATUS"/>
		<result property="qStatus" column="Q_STATUS"/>		
	</resultMap>

		<!-- 회원 수와 쿠폰 갯수 조회  -->
	<select id="getListCount" resultType="_int">
		select count(*)
		<if test="value == 1">
			from member
		</if>
		<if test="value == 2">
			from member m
			left join tutor using(user_no)
			left join certification using(user_no)
			where user_type='T' AND U_STATUS='Y' and tstatus='R'
		</if>
		<if test="value == 3">
			from member m
			left join tutor using(user_no)
			left join certification using(user_no)
			where user_type ='T' AND U_STATUS='Y' and tstatus='Y'
		</if>
		<if test="value == 4">
			from qna
		</if>
		<if test="value == 5">
			from qna
			where a_status='N'
		</if>
		<if test="value == 6">
			from member
			where to_date(enroll_date,'YYYY/MM/DD')=to_date(sysdate,'YYYY/MM/DD')
		</if>
		
		
		
	</select>
	<!-- 회원수를 검색하여 리턴하는 구문  -->
	<select id="getListMemberSearchCount" resultType="_int">
	<bind name="sv" value="'%' + _parameter.getSearchValue() + '%'" />
	
		select count(*)
		from member
		<where>
			<choose>
				<when test="searchCondition == 'mName'">
					AND USER_NAME LIKE #{sv}
				</when>
				<otherwise>
					AND (USER_NAME LIKE #{sv} OR USER_TYPE LIKE #{sv})
				</otherwise>
			</choose>
		</where>
	</select>
	<!-- 전체 회원수(튜터 포함) 조회  -->
	<select id="selectMemberList" resultMap="AdminMemberResultSet">
		
		select *
		from member
		where user_type !='A'
		
	</select>
	<!-- 년도별 회원 수 조회  -->
	<select id="selectmemberCountList" resultMap="AdminMonthsStaticResultSet" parameterType="string">
		select count(decode(to_char(enroll_date,'MM'),'01',1)) "january",count(decode(to_char(enroll_date,'MM'),'02',1)) "february",
		count(decode(to_char(enroll_date,'MM'),'03',1)) "march",count(decode(to_char(enroll_date,'MM'),'04',1)) "april",count(decode(to_char(enroll_date,'MM'),'05',1)) "may",
		count(decode(to_char(enroll_date,'MM'),'06',1)) "june",count(decode(to_char(enroll_date,'MM'),'07',1)) "july",count(decode(to_char(enroll_date,'MM'),'08',1)) "august",
		count(decode(to_char(enroll_date,'MM'),'09',1)) "september",count(decode(to_char(enroll_date,'MM'),'10',1)) "october",count(decode(to_char(enroll_date,'MM'),'11',1)) "november",
		count(decode(to_char(enroll_date,'MM'),'12',1)) "decemver"
		from member
		where extract(year from enroll_date)=extract(year from to_date(#{value},'YYYY')) and u_status !='N'
		group by to_char(sysdate,'yyyy-MM')
		order by 1
		
	</select>

	<!-- 년도별 월 수입 조회  -->
	<select id="selectmonthlyIncome" resultMap="AdminMonthsStaticResultSet" parameterType="string">
		
		select sum(decode(to_char(payment_date, 'mm'), '01', payment_cost, 0)) "january" ,sum(decode(to_char(payment_date, 'mm'), '02', payment_cost, 0)) "february" ,
		    sum(decode(to_char(payment_date, 'mm'), '03', payment_cost, 0)) "march" ,sum(decode(to_char(payment_date, 'mm'), '04', payment_cost, 0)) "april" ,
		    sum(decode(to_char(payment_date, 'mm'), '05', payment_cost, 0)) "may" ,sum(decode(to_char(payment_date, 'mm'), '06', payment_cost, 0)) "june" ,
		    sum(decode(to_char(payment_date, 'mm'), '07', payment_cost, 0)) "july" ,sum(decode(to_char(payment_date, 'mm'), '08', payment_cost, 0)) "august" ,
		    sum(decode(to_char(payment_date, 'mm'), '09', payment_cost, 0)) "september" ,sum(decode(to_char(payment_date, 'mm'), '10', payment_cost, 0)) "october" ,
		    sum(decode(to_char(payment_date, 'mm'), '11', payment_cost, 0)) "november" ,sum(decode(to_char(payment_date, 'mm'), '12', payment_cost, 0)) "decemver"
		from payment
		where to_char(payment_date,'YYYY')=#{value}
		
	</select>
	
	
	
	<!-- 튜터 인증신청 멤버와 튜터 인증완료된 멤버  셀렉  -->
	<select id="selectTutorList" resultMap="mAndtuJoinResultSet" parameterType="_int">
		select *
		from member m
		left join tutor using(user_no)
		
		<where>
		<if test='value == 1 '>
			user_type='T' AND U_STATUS='Y' and tstatus='Y'
		</if>
		
		<if test="value == 2">
		 	user_type='T' AND U_STATUS='Y' and tstatus='R'
		</if>
			
		</where>
	</select>
	
	<!-- 멤버 검색용 쿼리 (마이바티스 동적 쿼리 활용) -->
	<select id="searchMemberList" parameterType="Search"
		resultMap="AdminMemberResultSet">
		
		<bind name="sv" value="'%' + _parameter.getSearchValue() + '%'" />

		SELECT * FROM member
		<where>
			<choose>
				<when test="searchCondition == 'mName'">
					AND USER_NAME LIKE #{sv}
				</when>
				<otherwise>
					AND (USER_NAME LIKE #{sv} OR USER_TYPE LIKE #{sv})
				</otherwise>
			</choose>
		</where>
		ORDER BY USER_NO asc
	</select>
	
	<!-- 쿠폰 생성하기  -->
	<insert id="insertCoupon">
		
			<foreach collection="list" item="i" index="index" separator=" " open="INSERT ALL" close="SELECT * FROM DUAL">
                 INTO coupon VALUES(
                 get_seq('coupon_seq'),
                 #{i.cName},
                 #{i.cCode},
                 #{i.disRate},
                 #{i.startDate},
                 #{i.endDate},
                 'R',
                 #{i.uNo})
             </foreach>
			
				
	</insert>
	
	<!-- 회원 가입자 오늘 & 이번달 수 조회 -->
	<select id="countMember" resultType="_int">
	
		select count(user_no) as count
		from member
		<choose>
		<when test="value == 1">
		where to_date(enroll_date,'yyyy-mm-dd') = to_date(sysdate,'yyyy-mm-dd') and u_status='Y'
		</when>
		<when test="value == 2">
		where extract(month from enroll_date) = extract(month from sysdate) and u_status='Y'
		</when>
		</choose>
	</select>
	<!-- 오늘 & 이번 달 수입  -->
	<select id="sumPay" resultType="_int" parameterType="AdminPay">
		select nvl(sum(payment_cost),0) as PSUM
		from payment
		<choose>
		<when test="value == 1 ">
		where to_date(payment_date,'yyyy-mm-dd') = to_date(sysdate,'yyyy-mm-dd') and payment_status='1'
		</when>
		<when test="value == 2 ">
		where extract(month from payment_date) = extract(month from sysdate) and payment_status='1'
		</when>
		</choose>
	</select>
	
	<!-- 실시간 회원 리스트 조회  -->
	<select id="selectTopMemberList" resultMap="AdminMemberResultSet">
		SELECT *
		FROM(SELECT *
			FROM member
			WHERE u_STATUS = 'Y' and to_date(enroll_date,'yyyy-mm-dd') = to_date(sysdate,'yyyy-mm-dd') 
			ORDER BY enroll_date DESC)
		WHERE ROWNUM <![CDATA[ <= ]]> 5  
	</select>
	
	<!-- 실시간 수업 조회  -->
	<select id="selectRealTimeLessonList" resultMap="AdminLessonResultSet">
		select *
		from lessonRating
	</select>

 	<!-- 일반회원을 튜터 회원으로  튜터를 일반 회원으로-->
	<update id="changeTutorStatus" parameterType="hashmap">
		update tutor
			<choose>	
				<when test='cStr.equals("R")'>
					set tstatus='Y'
					where user_no in
					<foreach collection="uNo" item="n" open="(" close=")" separator=",">
						${n}
					</foreach>
				</when>
			</choose>
			<choose>	
				<when test='cStr.equals("Y")'>
					set tstatus='R'
					where user_no in
					<foreach collection="uNo" item="n" open="(" close=")" separator=",">
						${n}
					</foreach>
				</when>
			</choose>
	</update>
	
	
	
	 
	<select id="selectQnaList" resultMap="QnaResultSet" parameterType="_int">
		
		select *
		<if test="value == 1">
		from qna
		</if>
		<if test="value == 2">
		from qna
		where a_status='N'
		</if>
		
	</select>
	
	<select id="searchQnaCount" resultType="_int">
		<bind name="sv" value="'%' + _parameter.getSearchValue() + '%'" />
		select count(*)
		from qna
		<where>
			<choose>
				<when test="searchCondition == 'qWriter'">
					AND q_writer LIKE #{sv}
				</when>
				<when test="searchCondition == 'qTitle'">
					AND q_title LIKE #{sv}
				</when>
			</choose>
		</where>	
	</select>
	
	<select id="searchQnaList" resultMap="QnaResultSet" parameterType="Search">
		<bind name="sv" value="'%' + _parameter.getSearchValue() + '%'" />
		select *
		from qna
		<where>
			<choose>
				<when test="searchCondition == 'qWriter'">
					AND q_writer LIKE #{sv}
				</when>
				<when test="searchCondition == 'qTitle'">
					AND q_title LIKE #{sv}
				</when>
			</choose>
		</where>	
	</select>
	<select id="selectMuIdList" resultMap="AdminMemberResultSet" parameterType="list">
		
		select *
		from member
		<where>
			user_no in
			<foreach collection="list" item="n" open="(" close=")" separator=",">
				 ${n}
			</foreach>
		</where>
	
	</select>
	
	<select id="getListTutorSearchCount" resultType="_int">
	<bind name="sv" value="'%' + _parameter.getSearchValue() + '%'" />
	
		select count(*)
		from member m
		left join tutor using(user_no)
		left join certification using(user_no)
		<where>
			<choose>
				<when test="searchCondition == 'mName'">
					AND t_nick LIKE #{sv}
				</when>
			</choose>
			and user_type ='T' AND U_STATUS='Y' and tstatus='Y'
		</where>
	</select>
	<select id="searchTutorList" parameterType="Search"
	resultMap="mAndtuJoinResultSet">
		<bind name="sv" value="'%' + _parameter.getSearchValue() + '%'" />
		select *
		from member m
		left join tutor using(user_no)
		left join certification using(user_no)
		<where>
			<choose>
				<when test="searchCondition == 'mName'">
					AND t_nick LIKE #{sv}
				</when>
			</choose>
			and user_type ='T' AND U_STATUS='Y' and tstatus='Y'
		</where>
	
	</select>
	
	<select id="getSortMemberList" resultType="_int" parameterType="hashmap">
		
		select count(*)
		from member
		<where>
		<if test='Condition == 1'>
			and enroll_date between to_date(#{Date[0]}, 'YYYY/MM/DD') and to_date(#{Date[1]}, 'YYYY/MM/DD')
		</if>
 		<if test="Condition == 2">
			and age between #{Age[0]} and #{Age[1]}
		</if>
		<if test="Condition == 3">
			and gender =#{Gender[0]}
		</if>
		<if test="Condition == 4">
			and user_type =#{Type[0]}
		</if>
		and u_status='Y'	
		</where>	
		
	</select>
	<select id="sortingSelectMemberList" resultMap="AdminMemberResultSet" parameterType="hashmap">
		
		select user_no,user_id,user_name,gender,age,user_type,enroll_date
		from member
		<where>
		<if test='Condition == 1'>
			and enroll_date between to_date(#{Date[0]}, 'YYYY/MM/DD') and to_date(#{Date[1]}, 'YYYY/MM/DD')
		</if>
 		<if test="Condition == 2">
			and age between #{Age[0]} and #{Age[1]}
		</if>
		<if test="Condition == 3">
			and gender =#{Gender[0]}
		</if>
		<if test="Condition == 4">
			and user_type =#{Type[0]}
		</if>
		and u_status='Y'
			
		</where>		
		<if test='Condition == 1'>
			order by enroll_date
		</if>
 		<if test="Condition == 2">
			order by age
		</if>
		<if test="Condition == 3">
			order by gender
		</if>
		<if test="Condition == 4">
			order by user_type
		</if>
	</select>
	
	<select id="selectTopFiveVip" resultMap="AdminMemJoinPayResultSet">
		SELECT *
		FROM (SELECT M.USER_NO, M.USER_ID, M.USER_NAME,M.GENDER,SUM(P.PAYMENT_COST) TOTAL_PAY,M.ENROLL_DATE
		      FROM MEMBER M
		      JOIN PAYMENT P ON(M.USER_NO=P.USER_NO)
		      WHERE M.USER_TYPE !='A' AND M.U_STATUS !='N'
		      GROUP BY M.USER_NO, M.USER_ID, M.USER_NAME,M.GENDER,M.ENROLL_DATE
		      ORDER BY 5 DESC)
		WHERE ROWNUM <![CDATA[ <= ]]> 5  
	</select>
	<select id="selectNewJoinList" resultMap="AdminMemberResultSet">
		select *
		from member
		left join coupon using(user_no)
		where to_date(enroll_date,'YYYY/MM/DD')=to_date(sysdate,'YYYY/MM/DD')
		and u_status='Y' and user_type != 'A' and coupon_no is null
	</select>

	<select id="selectYearList" resultType="string">
		select distinct extract(year from enroll_date)
		from member
		order by 1 desc
	</select>

	<select id="selectYearList2" resultType="string">
		select distinct extract(year from payment_date)
		from payment
		left join member using(user_no)
		where payment_status='1'
		order by 1 asc
	</select>
	
	
</mapper>
